package Manager;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Rose
 */
public class DeleteActionWindows extends javax.swing.JDialog {

    public static File TFile;

    public static String targetPath;
    public static boolean all;
    public static boolean hasExtension;
    public static boolean hasExtensionIgnoreCase;
    public static String extension;
    public static boolean hasWord;
    public static boolean hasWordIgnoreCase;
    public static String searchWord;
    public static boolean hasStart;
    public static boolean hasstartIgnoreCase;
    public static String startWord;
    public static boolean isshortcut;
    public static boolean lastmodified;
    public static Date date;
    public static boolean hassize;
    public static int sizeConstraint;
    public static int size;
    public static int multiplier;

    public static boolean isSameDate(File file, Date date) {
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        String F = dateFormat.format(file.lastModified());
        System.out.println("LM" + F);
        String D = dateFormat.format(date);
        if (F.equals(D)) {
            return true;
        } else {
            return false;
        }
    }

    public DeleteActionWindows(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        file_folderbuttonGroup = new javax.swing.ButtonGroup();
        sizebuttonGroup = new javax.swing.ButtonGroup();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        allCheckBox = new javax.swing.JCheckBox();
        extensionCheckBox = new javax.swing.JCheckBox();
        extensionTextField = new javax.swing.JTextField();
        containswordCheckBox = new javax.swing.JCheckBox();
        containswordTextField = new javax.swing.JTextField();
        startwithCheckBox = new javax.swing.JCheckBox();
        startwithTextField = new javax.swing.JTextField();
        sizeCheckBox = new javax.swing.JCheckBox();
        greaterthanRadioButton = new javax.swing.JRadioButton();
        lessthanRadioButton = new javax.swing.JRadioButton();
        sizeComboBox = new javax.swing.JComboBox();
        confirmkButton = new javax.swing.JButton();
        sizeSpinner = new javax.swing.JSpinner();
        extensionLabel = new javax.swing.JLabel();
        copyProgressBar = new javax.swing.JProgressBar();
        copypenddingLabel = new javax.swing.JLabel();
        isshortcutCheckBox = new javax.swing.JCheckBox();
        hasextensionignorecaseCheckBox = new javax.swing.JCheckBox();
        containswordignorecaseCheckBoxCheckBox = new javax.swing.JCheckBox();
        startwithignorecaseCheckBox = new javax.swing.JCheckBox();
        containswordLabel = new javax.swing.JLabel();
        startwithLabel = new javax.swing.JLabel();
        issortcutLabel = new javax.swing.JLabel();
        lastmodifiedCheckBox = new javax.swing.JCheckBox();
        lastmodifiedDateChooser = new com.toedter.calendar.JDateChooser();
        lastmodifiedlabel = new javax.swing.JLabel();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select Action For Copy or Move");
        setName("Movedialog"); // NOI18N
        setResizable(false);

        allCheckBox.setSelected(true);
        allCheckBox.setText("All");
        allCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                allCheckBoxItemStateChanged(evt);
            }
        });

        extensionCheckBox.setText("Has Extension");
        extensionCheckBox.setEnabled(false);
        extensionCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                extensionCheckBoxItemStateChanged(evt);
            }
        });

        extensionTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        extensionTextField.setEnabled(false);
        extensionTextField.setPreferredSize(new java.awt.Dimension(100, 25));

        containswordCheckBox.setText("Contains Word");
        containswordCheckBox.setEnabled(false);
        containswordCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                containswordCheckBoxItemStateChanged(evt);
            }
        });

        containswordTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        containswordTextField.setAutoscrolls(false);
        containswordTextField.setEnabled(false);
        containswordTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        containswordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                containswordTextFieldActionPerformed(evt);
            }
        });

        startwithCheckBox.setText("Start With");
        startwithCheckBox.setEnabled(false);
        startwithCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                startwithCheckBoxItemStateChanged(evt);
            }
        });

        startwithTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        startwithTextField.setEnabled(false);
        startwithTextField.setPreferredSize(new java.awt.Dimension(100, 25));

        sizeCheckBox.setText("Size");
        sizeCheckBox.setEnabled(false);
        sizeCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sizeCheckBoxItemStateChanged(evt);
            }
        });

        sizebuttonGroup.add(greaterthanRadioButton);
        greaterthanRadioButton.setSelected(true);
        greaterthanRadioButton.setText("Greater than");
        greaterthanRadioButton.setEnabled(false);

        sizebuttonGroup.add(lessthanRadioButton);
        lessthanRadioButton.setText("Less than");
        lessthanRadioButton.setEnabled(false);

        sizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Byte", "KB", "MB", "GB" }));
        sizeComboBox.setEnabled(false);
        sizeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeComboBoxActionPerformed(evt);
            }
        });

        confirmkButton.setBackground(new java.awt.Color(0, 153, 153));
        confirmkButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        confirmkButton.setForeground(new java.awt.Color(255, 255, 255));
        confirmkButton.setText("Confirm");
        confirmkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmkButtonActionPerformed(evt);
            }
        });

        sizeSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999999999, 1));
        sizeSpinner.setEnabled(false);
        sizeSpinner.setPreferredSize(new java.awt.Dimension(100, 25));

        extensionLabel.setText("**without dot (.)  e.g  txt");
        extensionLabel.setEnabled(false);

        copyProgressBar.setStringPainted(true);
        copyProgressBar.setVisible(false);

        copypenddingLabel.setVisible(false);

        isshortcutCheckBox.setText("Is Shortcut");
        isshortcutCheckBox.setEnabled(false);
        isshortcutCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                isshortcutCheckBoxItemStateChanged(evt);
            }
        });

        hasextensionignorecaseCheckBox.setText("IgnoreCase");
        hasextensionignorecaseCheckBox.setEnabled(false);
        hasextensionignorecaseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hasextensionignorecaseCheckBoxActionPerformed(evt);
            }
        });

        containswordignorecaseCheckBoxCheckBox.setText("IgnoreCase");
        containswordignorecaseCheckBoxCheckBox.setEnabled(false);

        startwithignorecaseCheckBox.setText("IgnoreCase");
        startwithignorecaseCheckBox.setEnabled(false);

        containswordLabel.setText("**Character/Character sequence e.g tutorial");
        containswordLabel.setEnabled(false);

        startwithLabel.setText("**Character/Character sequence e.g slide");
        startwithLabel.setEnabled(false);

        issortcutLabel.setText("** .lnk file");
        issortcutLabel.setEnabled(false);

        lastmodifiedCheckBox.setText("Last Modified");
        lastmodifiedCheckBox.setEnabled(false);
        lastmodifiedCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lastmodifiedCheckBoxItemStateChanged(evt);
            }
        });

        lastmodifiedDateChooser.setDateFormatString("d/MM/yyyy");
        lastmodifiedDateChooser.setEnabled(false);
        lastmodifiedDateChooser.setMinSelectableDate(new java.util.Date(-2177470291000L));
        lastmodifiedDateChooser.setMaxSelectableDate(new Date());
        lastmodifiedDateChooser.setDate(new Date());

        lastmodifiedlabel.setText("**Valid date   e.g  06/02/2012 (can't select future date)");
        lastmodifiedlabel.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(272, 272, 272)
                .addComponent(confirmkButton)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(extensionCheckBox)
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(startwithignorecaseCheckBox)
                                    .addComponent(hasextensionignorecaseCheckBox)
                                    .addComponent(containswordignorecaseCheckBoxCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(extensionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(extensionLabel))
                                    .addComponent(containswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(startwithTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(317, 317, 317)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(containswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(startwithLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sizeCheckBox)
                                .addGap(29, 29, 29)
                                .addComponent(greaterthanRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lessthanRadioButton)
                                .addGap(18, 18, 18)
                                .addComponent(sizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(sizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(startwithCheckBox)
                            .addComponent(containswordCheckBox)
                            .addComponent(allCheckBox)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(isshortcutCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(issortcutLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lastmodifiedCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(lastmodifiedDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lastmodifiedlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(copypenddingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(221, 221, 221))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(copyProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(allCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(extensionCheckBox)
                    .addComponent(extensionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extensionLabel)
                    .addComponent(hasextensionignorecaseCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(containswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(containswordCheckBox)
                    .addComponent(containswordignorecaseCheckBoxCheckBox)
                    .addComponent(containswordLabel))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startwithCheckBox)
                    .addComponent(startwithTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startwithignorecaseCheckBox)
                    .addComponent(startwithLabel))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lastmodifiedCheckBox)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(lastmodifiedlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sizeCheckBox)
                            .addComponent(greaterthanRadioButton)
                            .addComponent(lessthanRadioButton)
                            .addComponent(sizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(isshortcutCheckBox)
                            .addComponent(issortcutLabel))
                        .addGap(45, 45, 45)
                        .addComponent(copyProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                        .addGap(5, 5, 5)
                        .addComponent(copypenddingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lastmodifiedDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confirmkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void containswordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_containswordTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_containswordTextFieldActionPerformed

    private void sizeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sizeComboBoxActionPerformed

    private void extensionCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_extensionCheckBoxItemStateChanged
        if (extensionCheckBox.isSelected()) {
            extensionTextField.setEnabled(true);
            extensionLabel.setEnabled(true);
            hasextensionignorecaseCheckBox.setEnabled(true);
        } else {
            extensionTextField.setEnabled(false);
            extensionLabel.setEnabled(false);
            hasextensionignorecaseCheckBox.setEnabled(false);
        }
    }//GEN-LAST:event_extensionCheckBoxItemStateChanged

    private void containswordCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_containswordCheckBoxItemStateChanged
        if (containswordCheckBox.isSelected()) {
            containswordTextField.setEnabled(true);
            containswordignorecaseCheckBoxCheckBox.setEnabled(true);
            containswordLabel.setEnabled(true);
        } else {
            containswordTextField.setEnabled(false);
            containswordignorecaseCheckBoxCheckBox.setEnabled(false);
            containswordLabel.setEnabled(false);
        }
    }//GEN-LAST:event_containswordCheckBoxItemStateChanged

    private void startwithCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_startwithCheckBoxItemStateChanged
        if (startwithCheckBox.isSelected()) {
            startwithTextField.setEnabled(true);
            startwithignorecaseCheckBox.setEnabled(true);
            startwithLabel.setEnabled(true);
        } else {
            startwithTextField.setEnabled(false);
            startwithignorecaseCheckBox.setEnabled(false);
            startwithLabel.setEnabled(false);
        }
    }//GEN-LAST:event_startwithCheckBoxItemStateChanged

    private void sizeCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sizeCheckBoxItemStateChanged
        if (sizeCheckBox.isSelected()) {
            greaterthanRadioButton.setEnabled(true);
            lessthanRadioButton.setEnabled(true);
            sizeSpinner.setEnabled(true);
            sizeComboBox.setEnabled(true);
        } else {
            greaterthanRadioButton.setEnabled(false);
            lessthanRadioButton.setEnabled(false);
            sizeSpinner.setEnabled(false);
            sizeComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_sizeCheckBoxItemStateChanged

    private void allCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_allCheckBoxItemStateChanged

        if (allCheckBox.isSelected()) {
            extensionCheckBox.setEnabled(false);
            containswordCheckBox.setEnabled(false);
            startwithCheckBox.setEnabled(false);
            sizeCheckBox.setEnabled(false);
            isshortcutCheckBox.setEnabled(false);
            lastmodifiedCheckBox.setEnabled(false);

            extensionCheckBox.setSelected(false);
            containswordCheckBox.setSelected(false);
            startwithCheckBox.setSelected(false);
            sizeCheckBox.setSelected(false);
            isshortcutCheckBox.setSelected(false);
            lastmodifiedCheckBox.setSelected(false);

        } else {
            extensionCheckBox.setEnabled(true);
            containswordCheckBox.setEnabled(true);
            startwithCheckBox.setEnabled(true);
            sizeCheckBox.setEnabled(true);
            isshortcutCheckBox.setEnabled(true);
            lastmodifiedCheckBox.setEnabled(true);
        }
    }//GEN-LAST:event_allCheckBoxItemStateChanged

    private void confirmkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmkButtonActionPerformed
        confirmkButton.setVisible(false);
        if ((allCheckBox.isSelected() == false && extensionCheckBox.isSelected() == false && containswordCheckBox.isSelected() == false && startwithCheckBox.isSelected() == false && sizeCheckBox.isSelected() == false && isshortcutCheckBox.isSelected() == false && lastmodifiedCheckBox.isSelected() == false)) {
            JOptionPane.showMessageDialog(rootPane, "Please Select one CheckBox", "Error!", JOptionPane.WARNING_MESSAGE);
            confirmkButton.setVisible(true);
        } else {

            all = allCheckBox.isSelected();
            hasExtension = extensionCheckBox.isSelected();
            if (hasExtension) {
                extension = extensionTextField.getText();
                hasExtensionIgnoreCase = hasextensionignorecaseCheckBox.isSelected();
            }
            hasWord = containswordCheckBox.isSelected();
            if (hasWord) {
                searchWord = containswordTextField.getText();
                hasWordIgnoreCase = containswordignorecaseCheckBoxCheckBox.isSelected();
            }
            hasStart = startwithCheckBox.isSelected();
            if (hasStart) {
                startWord = startwithTextField.getText();
                hasstartIgnoreCase = startwithignorecaseCheckBox.isSelected();
            }
            isshortcut = isshortcutCheckBox.isSelected();

            lastmodified = lastmodifiedCheckBox.isSelected();
            if (lastmodified) {
                date = lastmodifiedDateChooser.getDate();
            }
            hassize = sizeCheckBox.isSelected();
            if (hassize) {
                if (greaterthanRadioButton.isSelected()) {
                    sizeConstraint = 1;
                    size = Integer.parseInt(sizeSpinner.getValue().toString());
                    multiplier = sizeComboBox.getSelectedIndex();
                } else {
                    sizeConstraint = -1;
                    size = Integer.parseInt(sizeSpinner.getValue().toString());
                    multiplier = sizeComboBox.getSelectedIndex();
                }
                //sizeConstraint = 0;
            }
            try {
                    copyProgressBar.setVisible(true);
                    copypenddingLabel.setVisible(true);
                    Deleter deleter = new Deleter(copyProgressBar, copypenddingLabel);
                    deleter.execute();
                    Thread t = new Thread(new Runnable() {

                        @Override
                        public void run() {
                            while (!deleter.isDone()) {
                                try {
                                    Thread.sleep(1000);
                                } catch (InterruptedException ex) {
                                    Logger.getLogger(DeleteActionWindows.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                             if(Deleter.clk>0){
                            JOptionPane.showMessageDialog(rootPane, "Delete Successfull!", "OK", JOptionPane.INFORMATION_MESSAGE);
                            DeleteActionWindows.this.dispose();
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(rootPane, "No File Deleted!", "OK", JOptionPane.INFORMATION_MESSAGE);
                        DeleteActionWindows.this.dispose();
                         
                            }
                        }
                    });
                    t.start();
            } catch (IOException e) {
            }
        }
    }//GEN-LAST:event_confirmkButtonActionPerformed

    private void hasextensionignorecaseCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hasextensionignorecaseCheckBoxActionPerformed
        if (extensionCheckBox.isSelected()) {
            extensionTextField.setEditable(true);
            extensionLabel.setEnabled(true);
            hasextensionignorecaseCheckBox.setEnabled(true);
        } else {
            extensionTextField.setEditable(false);
            extensionLabel.setEnabled(false);
            hasextensionignorecaseCheckBox.setEnabled(false);
        }
    }//GEN-LAST:event_hasextensionignorecaseCheckBoxActionPerformed

    private void isshortcutCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_isshortcutCheckBoxItemStateChanged
        if (isshortcutCheckBox.isSelected()) {
            issortcutLabel.setEnabled(true);
        } else {
            issortcutLabel.setEnabled(false);
        }
    }//GEN-LAST:event_isshortcutCheckBoxItemStateChanged

    private void lastmodifiedCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lastmodifiedCheckBoxItemStateChanged
        if (lastmodifiedCheckBox.isSelected()) {
            lastmodifiedDateChooser.setEnabled(true);
            lastmodifiedlabel.setEnabled(true);
        } else {
            lastmodifiedDateChooser.setEnabled(false);
            lastmodifiedlabel.setEnabled(false);
        }
    }//GEN-LAST:event_lastmodifiedCheckBoxItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeleteActionWindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeleteActionWindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeleteActionWindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeleteActionWindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DeleteActionWindows dialog = new DeleteActionWindows(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox allCheckBox;
    private javax.swing.JButton confirmkButton;
    private javax.swing.JCheckBox containswordCheckBox;
    private javax.swing.JLabel containswordLabel;
    private javax.swing.JTextField containswordTextField;
    private javax.swing.JCheckBox containswordignorecaseCheckBoxCheckBox;
    private javax.swing.JProgressBar copyProgressBar;
    private javax.swing.JLabel copypenddingLabel;
    private javax.swing.JCheckBox extensionCheckBox;
    private javax.swing.JLabel extensionLabel;
    private javax.swing.JTextField extensionTextField;
    private javax.swing.ButtonGroup file_folderbuttonGroup;
    private javax.swing.JRadioButton greaterthanRadioButton;
    private javax.swing.JCheckBox hasextensionignorecaseCheckBox;
    private javax.swing.JCheckBox isshortcutCheckBox;
    private javax.swing.JLabel issortcutLabel;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JCheckBox lastmodifiedCheckBox;
    private com.toedter.calendar.JDateChooser lastmodifiedDateChooser;
    private javax.swing.JLabel lastmodifiedlabel;
    private javax.swing.JRadioButton lessthanRadioButton;
    private javax.swing.JCheckBox sizeCheckBox;
    private javax.swing.JComboBox sizeComboBox;
    private javax.swing.JSpinner sizeSpinner;
    private javax.swing.ButtonGroup sizebuttonGroup;
    private javax.swing.JCheckBox startwithCheckBox;
    private javax.swing.JLabel startwithLabel;
    private javax.swing.JTextField startwithTextField;
    private javax.swing.JCheckBox startwithignorecaseCheckBox;
    // End of variables declaration//GEN-END:variables
}

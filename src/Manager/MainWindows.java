package Manager;

import static Manager.Copier.paths;
import static Manager.Copier.target;
import Tablemodel.FilesTableModel;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.ProgressBar;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;
import javax.swing.table.TableColumn;

/**
 *
 * @author Rima
 */
public class MainWindows extends JFrame {

    public static File[] files;
    public static String[] fileNames;
    public static int numberOfFiles;
    public static int parent = 0;
  
    public void setFileNames() {
        numberOfFiles = files.length;
        fileNames = new String[numberOfFiles];
        for (int i = 0; i < numberOfFiles; i++) {
            fileNames[i] = files[i].getName();
        }
        setTableModel();
    }

    public void setTableModel() {
        Table.setModel(new FilesTableModel());
        Table.getTableHeader().setReorderingAllowed(false);
        TableColumn column;
        for (int i = 0; i < 5; i++) {
            column = Table.getColumnModel().getColumn(i);

            if (i == 0) {
                column.setPreferredWidth(35);
            } if (i == 1) {
                column.setPreferredWidth(300);
            }if (i == 2) {
                column.setPreferredWidth(100);
            } 
             if (i == 3) {
                column.setPreferredWidth(620);
            }
             if (i == 4) {
                column.setPreferredWidth(80);
            } if (i == 5) {
                column.setPreferredWidth(150);
            } 
        }
    }

    public MainWindows() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sourceButton = new javax.swing.JButton();
        tableScrollPane = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        mainComboBox = new javax.swing.JComboBox();
        loadingProgressBar = new javax.swing.JProgressBar();
        loadingLabel = new javax.swing.JLabel();
        MenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        selectsourceMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        clrfilelistMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("File System Wizard");
        setResizable(false);

        sourceButton.setBackground(new java.awt.Color(0, 153, 153));
        sourceButton.setFont(new java.awt.Font("Siyam Rupali", 1, 12)); // NOI18N
        sourceButton.setForeground(new java.awt.Color(255, 255, 255));
        sourceButton.setText("Source Path");
        sourceButton.setToolTipText("Select Source Path");
        sourceButton.setBorderPainted(false);
        sourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceButtonActionPerformed(evt);
            }
        });

        Table.setFont(new java.awt.Font("Siyam Rupali", 0, 11)); // NOI18N
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Serial", "Name", "Type", "Location", "Size", "Last Modified"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Table.setFillsViewportHeight(true);
        Table.setName(""); // NOI18N
        Table.getTableHeader().setReorderingAllowed(false);
        tableScrollPane.setViewportView(Table);
        if (Table.getColumnModel().getColumnCount() > 0) {
            Table.getColumnModel().getColumn(0).setResizable(false);
            Table.getColumnModel().getColumn(0).setPreferredWidth(35);
            Table.getColumnModel().getColumn(1).setResizable(false);
            Table.getColumnModel().getColumn(2).setResizable(false);
            Table.getColumnModel().getColumn(3).setResizable(false);
            Table.getColumnModel().getColumn(4).setResizable(false);
            Table.getColumnModel().getColumn(5).setResizable(false);
        }

        mainComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Action", "Copy Service", "Move Service", "Delete Service" }));
        mainComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainComboBoxActionPerformed(evt);
            }
        });

        loadingProgressBar.setToolTipText("");
        loadingProgressBar.setIndeterminate(true);
        loadingProgressBar.setVisible(false);

        loadingLabel.setVisible(false);

        fileMenu.setText("Menu");

        selectsourceMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        selectsourceMenuItem.setText("Select Source");
        selectsourceMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectsourceMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(selectsourceMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Manager/icon_exit.png"))); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        MenuBar.add(fileMenu);

        editMenu.setText("Edit");

        clrfilelistMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        clrfilelistMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Manager/icon_clear.png"))); // NOI18N
        clrfilelistMenuItem.setText("Clear File List");
        clrfilelistMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clrfilelistMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(clrfilelistMenuItem);

        MenuBar.add(editMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About Us");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        MenuBar.add(helpMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1300, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sourceButton)
                .addGap(126, 126, 126)
                .addComponent(mainComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(loadingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(loadingProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sourceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainComboBox, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(loadingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadingProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceButtonActionPerformed

        FileChooser fc = new FileChooser();
        fc.execute();
        loadingLabel.setText("File is loading.....");
        loadingProgressBar.setVisible(true);
        loadingLabel.setVisible(true);

        Thread t = new Thread(new Runnable() {

            @Override
            public void run() {

                while (!fc.isDone()) {

                    try {
                        loadingLabel.setText("File is loading " + FileChooser.progress);
                        Thread.sleep(100);
//                        loadingLabel.setText("File is loading...");
//                        Thread.sleep(100);
//                        loadingLabel.setText("File is loading......");
//                        Thread.sleep(100);
//                        loadingLabel.setText("File is loading............");
//                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainWindows.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                loadingLabel.setText("Prepareing Table....");
                try {
                    files = fc.get();
                    if (files != null) {
                        setFileNames();
                    } else {
                        System.out.println("empty");
                        JOptionPane.showMessageDialog(null, "Folder is Empty!", "Warning", JOptionPane.WARNING_MESSAGE);
                    }
                    loadingProgressBar.setVisible(false);
                    //loadingLabel.setVisible(false);
                    loadingLabel.setText(files.length + " File Loaded");
                } catch (Exception e) {
                    e.printStackTrace();
                    System.err.println(e.getMessage());
                }
                //System.out.println("Chk");
            }
        });
        t.start();
    }//GEN-LAST:event_sourceButtonActionPerformed

    private void selectsourceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectsourceMenuItemActionPerformed
        sourceButtonActionPerformed(evt);
    }//GEN-LAST:event_selectsourceMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void clrfilelistMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clrfilelistMenuItemActionPerformed
        if (files != null) {
            fileNames = null;
            numberOfFiles = 0;
            files = null;
            loadingLabel.setText("");
            setTableModel();
        }
    }//GEN-LAST:event_clrfilelistMenuItemActionPerformed

    private void mainComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainComboBoxActionPerformed
        if (files == null || fileNames == null||files.length==0||fileNames.length==0) {
            
            JOptionPane.showMessageDialog(null, "Please Select Source!!!!", "Error", JOptionPane.WARNING_MESSAGE);
        } else {
           
            if (mainComboBox.getSelectedIndex() == 1) {
                parent = 1;
                CopyMoveActionWindows cpy = new CopyMoveActionWindows(null, rootPaneCheckingEnabled);
                cpy.setTitle("Copy Window");
                cpy.setVisible(true);
            } else if (mainComboBox.getSelectedIndex() == 2) {
                parent = 2;
                CopyMoveActionWindows mov = new CopyMoveActionWindows(null, rootPaneCheckingEnabled);
                mov.setTitle("Move Window");
                mov.setVisible(true);
            } else if (mainComboBox.getSelectedIndex() == 3) {
                DeleteActionWindows del = new DeleteActionWindows(null, rootPaneCheckingEnabled);
                del.setTitle("Delete Window");
                del.setVisible(true);
            }
        }
    }//GEN-LAST:event_mainComboBoxActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(null, "Developed by\nMd. Asaf-Uddowla Golap\n(KUET CSE 12)\nNasrin Akter Rima\n(KUET CSE 12)\nCopyright © 2014 CSE2100. All rights reserved.", "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainWindows().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JTable Table;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem clrfilelistMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    public static javax.swing.JLabel loadingLabel;
    private javax.swing.JProgressBar loadingProgressBar;
    private javax.swing.JComboBox mainComboBox;
    private javax.swing.JMenuItem selectsourceMenuItem;
    private javax.swing.JButton sourceButton;
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables
}
